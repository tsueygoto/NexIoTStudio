/**
 *
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 **/

var fs = require("fs");
var path = require("path");
var query = require('cli-interact');


/***
    global array variable
 */
    
var gArrFile = [];
var gArrDir = [];
var outStringLen = 60;
var spaceline = ' '.repeat(79);

/***

    Function

 */

/**

 */
function outConsole(content) {
    //process.stdout.write(spaceline + '\r');    // clear previous content
    var clen = content.length;
    var out = (clen < 79) ? (content + spaceline.slice(0, (79-clen))) : content.slice(-79);
    process.stdout.write(out + '\r');
}


/**

    type:
        0: file
        1: directory
 */
var count = 0;
var base = 100;
var step = 1;
function _nexAddObjByType(type, obj) {
    if (type == 0) {    // file
        gArrFile.push(obj);
    } else if (type == 1) {    // dir
        gArrDir.push(obj);
    }
    count++;
    if (count > (base * step)) {
        outConsole("tracing counter : " + count);
        step++;
    }
    return count;
}

/**

 */
var _nexTraceDir = function(dir, count, arr, cb) {
    var list = fs.readdirSync(dir);
    // got the list numbers
    var total = count + list.length;
    
    // delete files first
    var queueDir = [];
    var subDir = 0;
    for (var i = 0; i < list.length; i++) {
        var filename = path.join(dir, list[i]);
        var stat = fs.statSync(filename);

        if(filename == "." || filename == "..") {
            // pass these files
            total = total - 1;
        } else if(stat.isDirectory()) {
            subDir++;
            // rmdir recursively
            // console.log(filename);
            //_nexTraceDir(filename, total, function(dir) {
            //    fs.rmdirSync(dir);
            //    total = total - 1;
            //    subDir--;
            //});
            queueDir.push(filename);
        } else {
            // rm fiilename
            //console.log("[rm][" + filename);
            
            var out = filename;
            if (out.length > 50) {
                out = "..." + out.slice(-47);
            }
            var index = "";
            if (total < 100000000) 
            {
                var padZero = "00000000";
                //console.info(total.toString(), total.toString().length);
                index = padZero.slice(0, 8-(total.toString().length)) + total.toString();
            }
            //console.info("[rm] ", index, out);
            //outConsole("[rm] " + index + out);
            //fs.unlinkSync(filename);
            total = total - 1;
            
            //console.log(filename);
            //gArr.push(filename);
            _nexAddObjByType(0, filename);
            
        }
    }
    
    if (subDir == 0) cb(dir);
    else {
    // process queueDir
        queueDir.map(function(item, index, arr) {
            //console.log(index);

            _nexTraceDir(item, 0, arr, function(filename) {
                //fs.rmdirSync(target);
                //total = total - 1;
                //console.log(target);
                //gArr.push(filename);
                _nexAddObjByType(1, filename);
            });
            
            if (index == (arr.length - 1)) {
                cb(dir);
            }
            
        });
    }
    
    //console.log(arr);
    
    //console.log("[rm]" + dir);
    //list = fs.readdirSync(dir);
    //if (list.length == 0) {
    //    fs.rmdirSync(dir);
    //    total = total - 1;
    //}
};

/**

 */
function calcBase(src, base) {
    var remain = src;
    var outh = 0;
    var cont = true;
    while (cont) {
        // check hour
        if (remain > base) {
            outh++;
            remain = remain - base;
        } else {
            cont = false;
        }
    }
    return [outh, remain];
}


/**

 */
function padZero(zeroPattern, value) {
    var strValue = value.toString();
    if (strValue.length < zeroPattern.length) {
        return zeroPattern.slice(0, (zeroPattern.length)-(strValue.length)) + strValue;
    } else {
        return strValue;
    }
}

/**

 */
var percent = 0;
var line = 0;
function calcPercent(max, base, value) {
    if (value == max) {
        return 100;
    } else if ((value - line) > base) {
        percent++;
        line = line + base;
    }
    return percent;
}

/**

 */
function _nexRmObj (cb) {
    
        var fileLen = gArrFile.length;
        var dirLen = gArrDir.length;
        var total = fileLen + dirLen;
        var base = total / 100;
        
        // process Array File
        for(var index=0; index < fileLen; index++) {
            var filename = gArrFile[index]; 
            try {
                fs.unlinkSync(filename);
                var percent = calcPercent(total, base, index+1);
                outConsole("rm " + padZero("00",percent) + "% " + ((filename.length > outStringLen) ? ("..." + filename.slice(-outStringLen)) : filename));
            } catch (err) {
                console.log(err);
                return;
            }
        }
        gArrFile = null;
        
        // process Array Dir
        for(var index=0; index < dirLen; index++) {
            var filename = gArrDir[index];
            try {
                var files = fs.readdirSync(filename);
                if (files.length == 0) {
                    fs.rmdirSync(filename);
                    var percent = calcPercent(total, base, fileLen+index+1);
                    outConsole("rm " + padZero("00",percent) + "% " + ((filename.length > outStringLen) ? ("..." + filename.slice(-outStringLen)) : filename));
                }
            } catch (err) {
                console.log(err);
                return;
            }
        }
        gArrDir = null;
        
        cb();
}

/**

 */
function formatElaspedTime(elapsed) {
    const s = 1000;
    const m = 60000;
    const h = 60 * m;
    
    var reth = calcBase(elapsed, h);
    var retm = calcBase(reth[1], m);
    var rets = calcBase(retm[1], s);
    
    return padZero("00",reth[0]) + ":" + padZero("00",retm[0]) + ":" + padZero("00",rets[0]);
}
            
 
 
/**
    main
 */

var argv = process.argv;
if (argv.length != 3) {
    console.log("\nThe Usage error.\n\nUsage: node remove_modules targetPath\n");
    return;
}

var absolutePath = path.resolve(argv[2]);
console.log("The target path = " + absolutePath);
if (!fs.existsSync(absolutePath)) {
    console.log("[ERROR] The target path [" + absolutePath + "] is not exist.");
    return;
}

// console position control
console.log("\n\n\n\n");
process.stdout.write("\x1b[A");
process.stdout.write("\x1b[A");
process.stdout.write("\x1b[A");
process.stdout.write("\x1b[A");
process.stdout.write("\x1b[A");

var timeStart = Date.now();

var answer = query.getYesNo('Really want to remove ' + absolutePath + ' folder?');
if (answer) {
    var arr = [];
    _nexTraceDir(absolutePath, 0, arr, function(dir) {

        _nexAddObjByType(1, dir);
        console.log("\n");
        _nexRmObj(function() {
            
            var timeStop = Date.now();
            //var elapsed = timeStop - timeStart; // time in milliseconds
            console.log("\nElapsed %s", formatElaspedTime(timeStop - timeStart));
            
            // THE END
            console.log("\n");
            outConsole("\x1b[K");
            outConsole("<<< DONE >>>\n");
        });
        
    });
}

